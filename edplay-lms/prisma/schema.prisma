// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id    String @id @default(uuid())
  title String
  text  String

  // transformers: https://trpc.io/docs/v11/data-transformers
  // This is unique so it can be used for cursor-based pagination
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
}

// Prisma schema file: https://pris.ly/d/prisma-schema
// Prisma Accelerate: https://pris.ly/cli/accelerate-init

model School {
  sch_id    Int            @id @default(autoincrement())
  sch_name  String
  ed_level  EducationLevel
  location  String?
  createdAt DateTime       @default(now())

  users        User[]
  courses      Course[]
  enrollments  Enrollment[]
  gameLiteracy GameLiteracy[]
  gameNumeracy GameNumeracy[]
}

model User {
  user_id   Int      @id @default(autoincrement())
  username  String   @unique
  email     String?  @unique
  fullname  String
  password  String
  role      Role     @default(student)
  schoolId  Int
  school    School   @relation(fields: [schoolId], references: [sch_id], onDelete: Cascade)
  grade     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments  Enrollment[]
  submissions  AssignmentSubmission[]
  answers      Answer[]
  gameLiteracy GameLiteracy[]
  gameNumeracy GameNumeracy[]
  courses      Course[]               @relation("InstructorCourses")
}

model Course {
  id             Int            @id @default(autoincrement())
  name           String
  description    String?
  teacherId      Int?
  teacher        User?          @relation("InstructorCourses", fields: [teacherId], references: [user_id], onDelete: Cascade)
  schoolId       Int?
  school         School?        @relation(fields: [schoolId], references: [sch_id], onDelete: Cascade)
  educationLevel EducationLevel
  grade          Int?
  imageUrl       String         @default("/images/bgs/bg-class1.png")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isActive       Boolean        @default(true)
  enrollToken    String         @unique @default(dbgenerated("gen_random_uuid()"))

  enrollments Enrollment[] 
  assignments Assignment[]
  modules     Module[]
  quizzes     Quiz[]
  posts       Post[]
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  schoolId   Int
  school     School   @relation(fields: [schoolId], references: [sch_id], onDelete: Cascade)
  enrolledAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Assignment {
  id          Int                    @id @default(autoincrement())
  courseId    Int
  title       String
  description String?
  dueDate     DateTime?
  course      Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contents    AssignmentContent[]
  submissions AssignmentSubmission[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model AssignmentContent {
  id           Int         @id @default(autoincrement())
  assignmentId Int
  contentTitle String
  contentType  ContentType
  contentData  String
  filePath     String?
  createdAt    DateTime    @default(now())
  assignment   Assignment  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model AssignmentSubmission {
  id           Int      @id @default(autoincrement())
  assignmentId Int
  userId       Int
  answerText   String?
  filesJson    String?
  submittedAt  DateTime @default(now())

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@unique([assignmentId, userId])
}

model Module {
  id          Int             @id @default(autoincrement())
  courseId    Int
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String?
  contents    ModuleContent[]
  createdAt   DateTime        @default(now())
}

model ModuleContent {
  id           Int         @id @default(autoincrement())
  moduleId     Int
  module       Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentTitle String      @default("")
  contentType  ContentType
  contentData  String
  filePath     String?
  createdAt    DateTime    @default(now())
}

model Quiz {
  id                Int        @id @default(autoincrement())
  courseId          Int
  course            Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title             String
  description       String?
  allowResubmission Boolean    @default(false)
  questions         Question[]
  createdAt         DateTime   @default(now())
}

model Question {
  id           Int          @id @default(autoincrement())
  quizId       Int
  quiz         Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionText String
  questionType QuestionType
  imageUrl     String?
  createdAt    DateTime     @default(now())

  answers Answer[]
}

model Answer {
  id          Int      @id @default(autoincrement())
  questionId  Int
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  studentId   Int
  student     User     @relation(fields: [studentId], references: [user_id], onDelete: Cascade)
  answerText  String
  submittedAt DateTime @default(now())
}

model GameLiteracy {
  id       Int      @id @default(autoincrement())
  userId   Int
  user     User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  schoolId Int
  school   School   @relation(fields: [schoolId], references: [sch_id], onDelete: Cascade)
  score    Int
  playedAt DateTime @default(now())
}

model GameNumeracy {
  id       Int      @id @default(autoincrement())
  userId   Int
  user     User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  schoolId Int
  school   School   @relation(fields: [schoolId], references: [sch_id], onDelete: Cascade)
  score    Int
  playedAt DateTime @default(now())
}

// ENUMS
enum Role {
  student
  teacher
  admin
}

enum EducationLevel {
  SD
  SMP
  SMA
}

enum ContentType {
  TEXT
  FILE
  VIDEO
  LINK
}

enum QuestionType {
  multiple_choice
  short_answer
  true_false
}
